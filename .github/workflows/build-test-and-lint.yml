# Based on:
#   - https://github.com/actions-rs/example/blob/master/.github/workflows/quickstart.yml
#
# Using:
#   - https://github.com/actions-rs/toolchain   -> https://github.com/marketplace/actions/rust-toolchain
#   - https://github.com/actions-rs/cargo       -> https://github.com/marketplace/actions/rust-cargo
#
# for simplicity we are checking compilation but testing everything on the Ubuntu environment only.

on:
  push:
    branches: [ "master", "release/*" ]
  pull_request:
    branches: [ master ]
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Run this workflow in what branch?'
        required: true
        type: string
        default: master
  schedule:
    # Run on the 3rd of every month at 2:01
    - cron:  '1 2 3 * *'

name: build-test-and-lint

jobs:
  run-guard:
    # it succeeds if any of the following conditions are met:
    #   - when the PR is not a draft and is not labeled 'prevent-ci'
    #   - when the PR is labeled 'force-ci'
    runs-on: ubuntu-latest
    if: |
      (  (!github.event.pull_request.draft) &&
         (github.event.action != 'labeled') &&
         (!contains( github.event.pull_request.labels.*.name, 'prevent-ci')) )
      || ((github.event.action != 'labeled') && contains( github.event.pull_request.labels.*.name, 'force-ci'))
      || (github.event.label.name == 'force-ci')
    steps:
      - name: Checking if CI shoud run for this push/PR...
        run: echo Resuming CI. Continuing next jobs...

  ci:
    needs: run-guard
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
    runs-on: "${{ matrix.os }}"

    services:
      solr:
        image: solr:slim
        ports:
        - "8983:8983"
        volumes:
          - data:/var/solr
        # https://docs.docker.com/reference/cli/docker/container/create/#options
        options: >-
          solr-demo

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          override: true
          components: rustfmt, clippy

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --verbose

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test 

      - name: Run cargo clippy
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/clippy-check@v1
        continue-on-error: true   # show all errors
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      - name: Check if the code or dependencies have future incompatibilities
        id: report_future_incompatibilities
        if: matrix.os == 'linux'
        run: |
          echo '::group::Checking Future Incompatibilities';

          printf '# Future Incompatibilities\n\n' > "${GITHUB_STEP_SUMMARY}";
          printf '<!-- markdownlint-disable-file MD009 MD027 MD028 MD034 -->\n## Compilation\n\n' >> "${GITHUB_STEP_SUMMARY}";

          cargo check --future-incompat-report 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}";

          echo '::endgroup::';
          echo '::group::Reporting Future Incompatibilities';

          printf '\n## Future Incompatibilities Report\n\n' > "${GITHUB_STEP_SUMMARY}";

          if cargo report future-incompatibilities --color never | sed 's/^> $//g' | tee -a "${GITHUB_STEP_SUMMARY}"; then 
            echo "FUTURE_INCOMPATIBILITIES=1" >> "${GITHUB_OUTPUT}";
            echo "::warning file=Cargo.toml,line=15,col=2,endColumn=24,title=FUTURE-INCOMPATIBILITIES::Future imcompatibilities found in source code or dependencies.";
            false;
          else
            echo "FUTURE_INCOMPATIBILITIES=0" >> "${GITHUB_OUTPUT}";
            printf 'No future incompatibilities found in this build.\n' > "${GITHUB_STEP_SUMMARY}";
          fi
          echo '::endgroup::';
          
      - name: Run cargo fmt
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Install cargo-llvm-cov
        if: matrix.os == 'ubuntu-latest'
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Run coverage report
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          command: llvm-cov 
          args: --all-features --workspace --lcov --output-path lcov.info

      - name: Coveralls
        if: matrix.os == 'ubuntu-latest'
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: './lcov.info'

      - name: Run security audit
        if: matrix.os == 'ubuntu-latest'
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  deps:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Print dependency tree
        uses: actions-rs/cargo@v1
        with:
          command: tree
          args: --verbose --color never

      - name: Find unused dependencies in Cargo.toml
        uses: aig787/cargo-udeps-action@v1
        with:
          version: 'latest'
          args: '--all-targets'

# end of file
